# -*- coding: utf-8 -*-
"""
Management command para diagnosticar campa√±as de email avanzadas
Uso: python manage.py diagnose_email_campaign --campaign-name "marzo 2025 hasta 100 mil"
"""

from django.core.management.base import BaseCommand, CommandError
from django.utils import timezone
from django.db.models import Q, Count
from datetime import datetime, timedelta
import pytz

from ventas.models import EmailCampaign, EmailRecipient, EmailDeliveryLog

class Command(BaseCommand):
    help = 'Diagnostica el estado de una campa√±a de email espec√≠fica'

    def add_arguments(self, parser):
        parser.add_argument(
            '--campaign-name',
            type=str,
            help='Nombre de la campa√±a a diagnosticar'
        )
        parser.add_argument(
            '--campaign-id',
            type=int,
            help='ID de la campa√±a a diagnosticar'
        )
        parser.add_argument(
            '--list-all',
            action='store_true',
            help='Mostrar todas las campa√±as disponibles'
        )

    def handle(self, *args, **options):
        """
        Diagnostica el estado de una campa√±a espec√≠fica
        """
        campaign_name = options.get('campaign_name')
        campaign_id = options.get('campaign_id')
        list_all = options.get('list_all')

        if list_all:
            self.list_all_campaigns()
            return

        # Buscar la campa√±a
        campaign = None
        if campaign_id:
            try:
                campaign = EmailCampaign.objects.get(id=campaign_id)
            except EmailCampaign.DoesNotExist:
                raise CommandError(f'No se encontr√≥ campa√±a con ID {campaign_id}')
        elif campaign_name:
            campaigns = EmailCampaign.objects.filter(name__icontains=campaign_name)
            if not campaigns.exists():
                raise CommandError(f'No se encontr√≥ campa√±a con nombre "{campaign_name}"')
            elif campaigns.count() > 1:
                self.stdout.write("üîç Se encontraron m√∫ltiples campa√±as:")
                for camp in campaigns:
                    self.stdout.write(f"   - ID {camp.id}: {camp.name} ({camp.get_status_display()})")
                raise CommandError('Especifica el ID exacto con --campaign-id')
            campaign = campaigns.first()
        else:
            raise CommandError('Debes especificar --campaign-name, --campaign-id, o --list-all')

        # Diagnosticar la campa√±a
        self.diagnose_campaign(campaign)

    def list_all_campaigns(self):
        """Lista todas las campa√±as disponibles"""
        campaigns = EmailCampaign.objects.all().order_by('-created_at')
        
        self.stdout.write("üìã TODAS LAS CAMPA√ëAS DISPONIBLES:")
        self.stdout.write("=" * 80)
        
        for campaign in campaigns:
            progress = f"{campaign.emails_sent}/{campaign.total_recipients}"
            percentage = campaign.progress_percentage
            
            self.stdout.write(f"üî∏ ID {campaign.id}: {campaign.name}")
            self.stdout.write(f"   Estado: {campaign.get_status_display()}")
            self.stdout.write(f"   Progreso: {progress} ({percentage:.1f}%)")
            self.stdout.write(f"   Creada: {campaign.created_at.strftime('%Y-%m-%d %H:%M')}")
            self.stdout.write("")

    def diagnose_campaign(self, campaign):
        """Diagnostica una campa√±a espec√≠fica"""
        self.stdout.write("üîç DIAGN√ìSTICO DE CAMPA√ëA DE EMAIL")
        self.stdout.write("=" * 60)
        
        # 1. Informaci√≥n b√°sica
        self.stdout.write("üìä INFORMACI√ìN B√ÅSICA:")
        self.stdout.write(f"   ‚Ä¢ Nombre: {campaign.name}")
        self.stdout.write(f"   ‚Ä¢ ID: {campaign.id}")
        self.stdout.write(f"   ‚Ä¢ Estado: {campaign.get_status_display()}")
        self.stdout.write(f"   ‚Ä¢ Creada: {campaign.created_at.strftime('%Y-%m-%d %H:%M')}")
        self.stdout.write(f"   ‚Ä¢ Creada por: {campaign.created_by.username if campaign.created_by else 'N/A'}")
        self.stdout.write("")

        # 2. Estad√≠sticas generales
        self.stdout.write("üìà ESTAD√çSTICAS GENERALES:")
        self.stdout.write(f"   ‚Ä¢ Total destinatarios: {campaign.total_recipients}")
        self.stdout.write(f"   ‚Ä¢ Emails enviados: {campaign.emails_sent}")
        self.stdout.write(f"   ‚Ä¢ Emails entregados: {campaign.emails_delivered}")
        self.stdout.write(f"   ‚Ä¢ Emails abiertos: {campaign.emails_opened}")
        self.stdout.write(f"   ‚Ä¢ Emails con click: {campaign.emails_clicked}")
        self.stdout.write(f"   ‚Ä¢ Emails rebotados: {campaign.emails_bounced}")
        self.stdout.write(f"   ‚Ä¢ Progreso: {campaign.progress_percentage:.1f}%")
        self.stdout.write("")

        # 3. An√°lisis de destinatarios
        self.stdout.write("üë• AN√ÅLISIS DE DESTINATARIOS:")
        recipients_stats = EmailRecipient.objects.filter(campaign=campaign).values('status').annotate(count=Count('status'))
        
        for stat in recipients_stats:
            status_display = dict(EmailRecipient.RECIPIENT_STATUS_CHOICES).get(stat['status'], stat['status'])
            self.stdout.write(f"   ‚Ä¢ {status_display}: {stat['count']}")
        
        # Destinatarios pendientes
        pending_recipients = EmailRecipient.objects.filter(
            campaign=campaign,
            status='pending',
            send_enabled=True
        )
        self.stdout.write(f"   ‚Ä¢ Pendientes habilitados: {pending_recipients.count()}")
        self.stdout.write("")

        # 4. Configuraci√≥n de env√≠o
        self.stdout.write("‚öôÔ∏è CONFIGURACI√ìN DE ENV√çO:")
        schedule_config = campaign.schedule_config
        if schedule_config:
            self.stdout.write(f"   ‚Ä¢ Horario: {schedule_config.get('start_time', 'N/A')} - {schedule_config.get('end_time', 'N/A')}")
            self.stdout.write(f"   ‚Ä¢ Tama√±o de lote: {schedule_config.get('batch_size', 'N/A')}")
            self.stdout.write(f"   ‚Ä¢ Intervalo: {schedule_config.get('interval_minutes', 'N/A')} minutos")
            self.stdout.write(f"   ‚Ä¢ Zona horaria: {schedule_config.get('timezone', 'N/A')}")
            self.stdout.write(f"   ‚Ä¢ IA habilitada: {schedule_config.get('ai_enabled', 'N/A')}")
        else:
            self.stdout.write("   ‚Ä¢ No hay configuraci√≥n de horarios")
        self.stdout.write("")

        # 5. Verificar si est√° en horario de env√≠o
        self.stdout.write("üïê ESTADO ACTUAL DE ENV√çO:")
        in_schedule, reason = self.check_schedule(campaign)
        self.stdout.write(f"   ‚Ä¢ En horario de env√≠o: {'S√≠' if in_schedule else 'No'}")
        if not in_schedule:
            self.stdout.write(f"   ‚Ä¢ Raz√≥n: {reason}")
        self.stdout.write("")

        # 6. √öltimos destinatarios procesados
        self.stdout.write("üìù √öLTIMOS 10 DESTINATARIOS:")
        recent_recipients = EmailRecipient.objects.filter(campaign=campaign).order_by('-sent_at', '-id')[:10]
        
        for recipient in recent_recipients:
            sent_time = recipient.sent_at.strftime('%H:%M') if recipient.sent_at else 'N/A'
            self.stdout.write(f"   ‚Ä¢ {recipient.email} - {recipient.get_status_display()} - {sent_time}")
        self.stdout.write("")

        # 7. Pr√≥ximos a enviar
        if pending_recipients.exists():
            self.stdout.write("üì§ PR√ìXIMOS 5 A ENVIAR:")
            next_recipients = pending_recipients[:5]
            for recipient in next_recipients:
                scheduled = recipient.scheduled_at.strftime('%H:%M') if recipient.scheduled_at else 'Inmediato'
                self.stdout.write(f"   ‚Ä¢ {recipient.email} - Programado: {scheduled}")
        else:
            self.stdout.write("üì§ PR√ìXIMOS A ENVIAR: Ninguno (campa√±a completada o pausada)")
        
        self.stdout.write("")

        # 8. Recomendaciones
        self.stdout.write("üí° RECOMENDACIONES:")
        if campaign.status == 'paused':
            self.stdout.write("   ‚ö†Ô∏è La campa√±a est√° PAUSADA. Para reanudar:")
            self.stdout.write("   python manage.py enviar_campana_email --campaign-id {} --auto".format(campaign.id))
        elif campaign.status == 'sending' and pending_recipients.exists():
            if not in_schedule:
                self.stdout.write(f"   ‚è∞ Fuera de horario de env√≠o. {reason}")
                self.stdout.write("   La campa√±a se reanudar√° autom√°ticamente en horario h√°bil.")
            else:
                self.stdout.write("   ‚úÖ La campa√±a deber√≠a estar envi√°ndose autom√°ticamente.")
                self.stdout.write("   Verifica que el cron job est√© configurado:")
                self.stdout.write("   */6 * * * * python manage.py enviar_campana_email --auto")
        elif campaign.status == 'completed':
            self.stdout.write("   ‚úÖ Campa√±a completada exitosamente.")
        elif pending_recipients.exists():
            self.stdout.write("   üöÄ Para iniciar/continuar el env√≠o:")
            self.stdout.write("   python manage.py enviar_campana_email --campaign-id {} --auto".format(campaign.id))
        
        self.stdout.write("")
        self.stdout.write("üîö FIN DEL DIAGN√ìSTICO")

    def check_schedule(self, campaign):
        """Verifica si la campa√±a est√° en horario de env√≠o"""
        schedule_config = campaign.schedule_config
        if not schedule_config:
            return True, "Sin restricciones de horario"
        
        # Configurar zona horaria
        timezone_name = schedule_config.get('timezone', 'America/Santiago')
        try:
            tz = pytz.timezone(timezone_name)
        except:
            tz = pytz.timezone('America/Santiago')
        
        now = timezone.now().astimezone(tz)
        current_time = now.time()
        
        # Verificar horario
        start_time_str = schedule_config.get('start_time', '08:00')
        end_time_str = schedule_config.get('end_time', '21:00')
        
        try:
            start_time = datetime.strptime(start_time_str, '%H:%M').time()
            end_time = datetime.strptime(end_time_str, '%H:%M').time()
        except:
            return True, "Error en formato de horario"
        
        if start_time <= current_time <= end_time:
            return True, f"Hora actual {current_time.strftime('%H:%M')} est√° en rango"
        else:
            return False, f"Hora actual {current_time.strftime('%H:%M')} fuera del rango {start_time_str}-{end_time_str}"