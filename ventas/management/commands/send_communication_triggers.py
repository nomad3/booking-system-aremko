# -*- coding: utf-8 -*-
"""
Management command para ejecutar triggers de comunicaci√≥n
Uso: python manage.py send_communication_triggers --type [reminders|surveys|birthdays|reactivation|vip|all]
"""

from django.core.management.base import BaseCommand, CommandError
from django.utils import timezone
import logging

from ventas.services.communication_triggers import (
    schedule_booking_reminders,
    schedule_satisfaction_surveys, 
    schedule_birthday_messages,
    schedule_reactivation_campaigns,
    schedule_vip_newsletters,
    test_communication_system
)

logger = logging.getLogger(__name__)


class Command(BaseCommand):
    help = 'Ejecuta triggers autom√°ticos de comunicaci√≥n'

    def add_arguments(self, parser):
        parser.add_argument(
            '--type',
            type=str,
            default='all',
            choices=['reminders', 'surveys', 'birthdays', 'reactivation', 'vip', 'test', 'all'],
            help='Tipo de comunicaci√≥n a enviar'
        )
        
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='Ejecutar en modo simulaci√≥n (no env√≠a mensajes reales)'
        )
        
        parser.add_argument(
            '--verbose',
            action='store_true',
            help='Mostrar informaci√≥n detallada'
        )

    def handle(self, *args, **options):
        start_time = timezone.now()
        
        if options['verbose']:
            logger.setLevel(logging.DEBUG)
            
        self.stdout.write(
            self.style.SUCCESS(
                f"üöÄ Iniciando triggers de comunicaci√≥n - {start_time.strftime('%Y-%m-%d %H:%M:%S')}"
            )
        )
        
        if options['dry_run']:
            self.stdout.write(
                self.style.WARNING("‚ö†Ô∏è  MODO SIMULACI√ìN ACTIVADO - No se enviar√°n mensajes reales")
            )
        
        trigger_type = options['type']
        
        try:
            if trigger_type == 'test':
                self._run_system_test()
            elif trigger_type == 'reminders':
                self._run_booking_reminders()
            elif trigger_type == 'surveys':
                self._run_satisfaction_surveys()
            elif trigger_type == 'birthdays':
                self._run_birthday_messages()
            elif trigger_type == 'reactivation':
                self._run_reactivation_campaigns()
            elif trigger_type == 'vip':
                self._run_vip_newsletters()
            elif trigger_type == 'all':
                self._run_all_triggers()
            else:
                raise CommandError(f"Tipo de trigger inv√°lido: {trigger_type}")
                
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f"‚ùå Error ejecutando triggers: {str(e)}")
            )
            raise CommandError(f"Error en ejecuci√≥n: {str(e)}")
        
        end_time = timezone.now()
        duration = (end_time - start_time).total_seconds()
        
        self.stdout.write(
            self.style.SUCCESS(
                f"‚úÖ Triggers completados exitosamente en {duration:.2f} segundos"
            )
        )

    def _run_system_test(self):
        """Ejecuta prueba completa del sistema"""
        self.stdout.write("üß™ Ejecutando prueba del sistema de comunicaci√≥n...")
        
        success = test_communication_system()
        
        if success:
            self.stdout.write(self.style.SUCCESS("‚úÖ Sistema funcionando correctamente"))
        else:
            self.stdout.write(self.style.ERROR("‚ùå Se encontraron problemas en el sistema"))
            raise CommandError("Prueba del sistema fall√≥")

    def _run_booking_reminders(self):
        """Ejecuta recordatorios de reservas"""
        self.stdout.write("üìÖ Enviando recordatorios de reservas...")
        
        try:
            schedule_booking_reminders()
            self.stdout.write(self.style.SUCCESS("‚úÖ Recordatorios procesados"))
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå Error en recordatorios: {str(e)}"))
            raise

    def _run_satisfaction_surveys(self):
        """Ejecuta encuestas de satisfacci√≥n"""
        self.stdout.write("üìä Enviando encuestas de satisfacci√≥n...")
        
        try:
            schedule_satisfaction_surveys()
            self.stdout.write(self.style.SUCCESS("‚úÖ Encuestas procesadas"))
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå Error en encuestas: {str(e)}"))
            raise

    def _run_birthday_messages(self):
        """Ejecuta mensajes de cumplea√±os"""
        self.stdout.write("üéÇ Enviando mensajes de cumplea√±os...")
        
        try:
            schedule_birthday_messages()
            self.stdout.write(self.style.SUCCESS("‚úÖ Mensajes de cumplea√±os procesados"))
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå Error en cumplea√±os: {str(e)}"))
            raise

    def _run_reactivation_campaigns(self):
        """Ejecuta campa√±as de reactivaci√≥n"""
        self.stdout.write("üîÑ Enviando campa√±as de reactivaci√≥n...")
        
        try:
            schedule_reactivation_campaigns()
            self.stdout.write(self.style.SUCCESS("‚úÖ Campa√±as de reactivaci√≥n procesadas"))
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå Error en reactivaci√≥n: {str(e)}"))
            raise

    def _run_vip_newsletters(self):
        """Ejecuta newsletters VIP"""
        self.stdout.write("üëë Enviando newsletters VIP...")
        
        try:
            schedule_vip_newsletters()
            self.stdout.write(self.style.SUCCESS("‚úÖ Newsletters VIP procesados"))
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå Error en newsletters VIP: {str(e)}"))
            raise

    def _run_all_triggers(self):
        """Ejecuta todos los triggers en secuencia"""
        self.stdout.write("üéØ Ejecutando todos los triggers...")
        
        triggers = [
            ("üìÖ Recordatorios", self._run_booking_reminders),
            ("üìä Encuestas", self._run_satisfaction_surveys),
            ("üéÇ Cumplea√±os", self._run_birthday_messages),
            ("üîÑ Reactivaci√≥n", self._run_reactivation_campaigns),
            ("üëë VIP", self._run_vip_newsletters),
        ]
        
        for name, trigger_func in triggers:
            try:
                self.stdout.write(f"Ejecutando {name}...")
                trigger_func()
            except Exception as e:
                self.stdout.write(
                    self.style.WARNING(f"‚ö†Ô∏è  Error en {name}: {str(e)}")
                )
                # Continuar con los dem√°s triggers aunque uno falle
                continue