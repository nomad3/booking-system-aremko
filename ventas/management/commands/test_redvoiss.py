# -*- coding: utf-8 -*-
"""
Management command para probar la integraci√≥n con Redvoiss
Uso: python manage.py test_redvoiss [--send-test-sms]
"""

from django.core.management.base import BaseCommand, CommandError
from django.conf import settings
import logging

from ventas.services.redvoiss_service import redvoiss_service
from ventas.models import Cliente

logger = logging.getLogger(__name__)


class Command(BaseCommand):
    help = 'Prueba la integraci√≥n con la API de Redvoiss'

    def add_arguments(self, parser):
        parser.add_argument(
            '--send-test-sms',
            action='store_true',
            help='Enviar SMS de prueba real (requiere credenciales v√°lidas)'
        )
        
        parser.add_argument(
            '--phone',
            type=str,
            help='N√∫mero de tel√©fono para SMS de prueba (formato: +56912345678)'
        )

    def handle(self, *args, **options):
        self.stdout.write(
            self.style.SUCCESS("üß™ Iniciando pruebas de integraci√≥n con Redvoiss")
        )
        
        # 1. Verificar configuraci√≥n
        self._check_configuration()
        
        # 2. Probar conexi√≥n
        self._test_connection()
        
        # 3. Probar env√≠o SMS si se solicita
        if options['send_test_sms']:
            phone = options.get('phone')
            self._test_sms_sending(phone)
        
        self.stdout.write(
            self.style.SUCCESS("‚úÖ Pruebas completadas exitosamente")
        )

    def _check_configuration(self):
        """Verifica que la configuraci√≥n est√© completa"""
        self.stdout.write("1Ô∏è‚É£ Verificando configuraci√≥n...")
        
        config_items = {
            'REDVOISS_API_URL': getattr(settings, 'REDVOISS_API_URL', None),
            'REDVOISS_USERNAME': getattr(settings, 'REDVOISS_USERNAME', None),
            'REDVOISS_PASSWORD': getattr(settings, 'REDVOISS_PASSWORD', None),
        }
        
        for key, value in config_items.items():
            if value:
                if 'PASSWORD' in key:
                    display_value = '*' * len(value) if value else 'No configurado'
                else:
                    display_value = value
                self.stdout.write(f"   ‚úÖ {key}: {display_value}")
            else:
                self.stdout.write(f"   ‚ùå {key}: No configurado")
                raise CommandError(f"Variable de entorno {key} no configurada")
        
        # Verificar l√≠mites
        limits = {
            'SMS_DAILY_LIMIT_PER_CLIENT': getattr(settings, 'SMS_DAILY_LIMIT_PER_CLIENT', 2),
            'SMS_MONTHLY_LIMIT_PER_CLIENT': getattr(settings, 'SMS_MONTHLY_LIMIT_PER_CLIENT', 8),
            'EMAIL_WEEKLY_LIMIT_PER_CLIENT': getattr(settings, 'EMAIL_WEEKLY_LIMIT_PER_CLIENT', 1),
        }
        
        self.stdout.write("   üìä L√≠mites configurados:")
        for key, value in limits.items():
            self.stdout.write(f"      {key}: {value}")

    def _test_connection(self):
        """Prueba la conexi√≥n con Redvoiss"""
        self.stdout.write("2Ô∏è‚É£ Probando conexi√≥n con Redvoiss...")
        
        try:
            result = redvoiss_service.greet()
            
            if result['success']:
                self.stdout.write(
                    self.style.SUCCESS(f"   ‚úÖ Conexi√≥n exitosa: {result['message']}")
                )
            else:
                self.stdout.write(
                    self.style.ERROR(f"   ‚ùå Error de conexi√≥n: {result['message']}")
                )
                raise CommandError("No se puede conectar con Redvoiss")
                
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f"   ‚ùå Error inesperado: {str(e)}")
            )
            raise CommandError(f"Error probando conexi√≥n: {str(e)}")

    def _test_sms_sending(self, phone=None):
        """Prueba el env√≠o real de SMS"""
        self.stdout.write("3Ô∏è‚É£ Probando env√≠o de SMS...")
        
        # Determinar n√∫mero de destino
        if phone:
            destination = phone
        else:
            # Buscar el primer cliente con tel√©fono
            cliente = Cliente.objects.filter(telefono__isnull=False).first()
            if cliente:
                destination = cliente.telefono
                self.stdout.write(f"   üì± Usando tel√©fono del cliente: {cliente.nombre} - {destination}")
            else:
                raise CommandError("No se encontr√≥ un n√∫mero de tel√©fono v√°lido. Use --phone para especificar uno.")
        
        # Validar formato
        if not destination.startswith('+56'):
            self.stdout.write(
                self.style.WARNING(f"   ‚ö†Ô∏è  N√∫mero {destination} no tiene formato internacional, intentando corregir...")
            )
        
        # Mensaje de prueba
        test_message = f"üß™ SMS de prueba desde Aremko - {timezone.now().strftime('%H:%M')}"
        
        try:
            result = redvoiss_service.send_sms(
                destination=destination,
                message=test_message,
                bulk_name="Prueba Aremko"
            )
            
            if result['success']:
                self.stdout.write(
                    self.style.SUCCESS(f"   ‚úÖ SMS enviado exitosamente!")
                )
                self.stdout.write(f"      üì± Destino: {result['destination']}")
                self.stdout.write(f"      üÜî Batch ID: {result['batch_id']}")
                self.stdout.write(f"      üí¨ Mensaje: {result['message']}")
                
                # Verificar estado despu√©s de unos segundos
                self._check_sms_status(result['batch_id'])
                
            else:
                self.stdout.write(
                    self.style.ERROR(f"   ‚ùå Error enviando SMS: {result['error']}")
                )
                raise CommandError("Fall√≥ el env√≠o de SMS de prueba")
                
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f"   ‚ùå Error inesperado enviando SMS: {str(e)}")
            )
            raise CommandError(f"Error en env√≠o de SMS: {str(e)}")

    def _check_sms_status(self, batch_id):
        """Verifica el estado del SMS enviado"""
        import time
        
        self.stdout.write("4Ô∏è‚É£ Verificando estado del SMS...")
        
        # Esperar unos segundos para que el SMS se procese
        self.stdout.write("   ‚è≥ Esperando 10 segundos para verificar estado...")
        time.sleep(10)
        
        try:
            result = redvoiss_service.check_batch_status(batch_id)
            
            if result['success']:
                self.stdout.write(
                    self.style.SUCCESS("   ‚úÖ Estado verificado exitosamente:")
                )
                
                for message in result['messages']:
                    status = message.get('message', 'UNKNOWN')
                    destination = message.get('destination', 'N/A')
                    msg_cod = message.get('msgCod', 'N/A')
                    
                    if status == 'RECIBIDO':
                        style = self.style.SUCCESS
                        icon = "üì±‚úÖ"
                    elif status == 'ENVIADO':
                        style = self.style.WARNING
                        icon = "üì§"
                    elif status == 'PENDIENTE':
                        style = self.style.HTTP_INFO
                        icon = "‚è≥"
                    else:
                        style = self.style.ERROR
                        icon = "‚ùå"
                    
                    self.stdout.write(
                        style(f"      {icon} {destination}: {status} (ID: {msg_cod})")
                    )
            else:
                self.stdout.write(
                    self.style.WARNING(f"   ‚ö†Ô∏è  No se pudo verificar estado: {result['error']}")
                )
                
        except Exception as e:
            self.stdout.write(
                self.style.WARNING(f"   ‚ö†Ô∏è  Error verificando estado: {str(e)}")
            )
        
        # Informaci√≥n sobre estados
        self.stdout.write("\nüìã Estados posibles:")
        self.stdout.write("   ‚Ä¢ PENDIENTE: No enviado a√∫n")
        self.stdout.write("   ‚Ä¢ ENVIADO: Enviado a la red, esperando confirmaci√≥n")
        self.stdout.write("   ‚Ä¢ RECIBIDO: Entregado al dispositivo del usuario")
        self.stdout.write("   ‚Ä¢ FALLIDO: No se pudo entregar")
        
        self.stdout.write(
            self.style.HTTP_INFO("\nüí° Los estados pueden cambiar hasta 24h despu√©s del env√≠o")
        )