"""
FASE 1.1: An√°lisis de ciudades en datos hist√≥ricos (ServiceHistory)

Este script analiza todas las variantes de ciudades en la tabla crm_service_history
para identificar inconsistencias y patrones de error.

NO MODIFICA DATOS - Solo lectura y an√°lisis
"""
import os
import django
from collections import Counter, defaultdict

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'aremko_project.settings')
django.setup()

from ventas.models import ServiceHistory

print("\n" + "="*100)
print("AN√ÅLISIS DE CIUDADES EN DATOS HIST√ìRICOS (crm_service_history)")
print("="*100 + "\n")

# Verificar que la tabla existe
try:
    total_registros = ServiceHistory.objects.count()
    print(f"‚úì Total de registros hist√≥ricos: {total_registros:,}\n")
except Exception as e:
    print(f"‚ùå Error: La tabla crm_service_history no existe o no es accesible: {e}")
    exit(1)

# Obtener todas las ciudades
ciudades = ServiceHistory.objects.values_list('city', flat=True)
contador_ciudades = Counter(ciudades)

# Filtrar valores vac√≠os
ciudades_con_valor = {ciudad: count for ciudad, count in contador_ciudades.items()
                      if ciudad and ciudad.strip()}
ciudades_vacias = contador_ciudades.get('', 0) + contador_ciudades.get(None, 0)

print("="*100)
print("RESUMEN GENERAL")
print("="*100)
print(f"Ciudades √∫nicas (con valor):     {len(ciudades_con_valor):>6,}")
print(f"Registros sin ciudad:            {ciudades_vacias:>6,}")
print(f"Total de registros:              {total_registros:>6,}")
print()

# Ordenar por cantidad (m√°s frecuentes primero)
ciudades_ordenadas = sorted(ciudades_con_valor.items(), key=lambda x: x[1], reverse=True)

print("="*100)
print("TOP 50 CIUDADES M√ÅS FRECUENTES")
print("="*100)
print(f"{'#':<4} {'CIUDAD':<50} {'REGISTROS':>12} {'%':>8}")
print("-"*100)

for i, (ciudad, count) in enumerate(ciudades_ordenadas[:50], 1):
    porcentaje = (count / total_registros) * 100
    print(f"{i:<4} {ciudad:<50} {count:>12,} {porcentaje:>7.2f}%")

# Agrupar variantes similares (normalizaci√≥n b√°sica para an√°lisis)
print("\n" + "="*100)
print("DETECCI√ìN DE VARIANTES (posibles duplicados)")
print("="*100)

# Crear grupos por ciudad normalizada
grupos = defaultdict(list)
for ciudad, count in ciudades_con_valor.items():
    # Normalizaci√≥n simple: lowercase, sin puntos, sin tildes b√°sicas
    ciudad_norm = ciudad.lower().strip()
    ciudad_norm = ciudad_norm.replace('.', '').replace(',', '')
    ciudad_norm = ciudad_norm.replace('√°', 'a').replace('√©', 'e').replace('√≠', 'i')
    ciudad_norm = ciudad_norm.replace('√≥', 'o').replace('√∫', 'u').replace('√±', 'n')

    grupos[ciudad_norm].append((ciudad, count))

# Mostrar grupos con m√∫ltiples variantes
variantes_detectadas = {norm: variantes for norm, variantes in grupos.items() if len(variantes) > 1}

if variantes_detectadas:
    print("\nSe detectaron variantes para las siguientes ciudades:\n")

    for norm_ciudad, variantes in sorted(variantes_detectadas.items(),
                                         key=lambda x: sum(v[1] for v in x[1]),
                                         reverse=True)[:20]:
        total_grupo = sum(count for _, count in variantes)
        print(f"\nüìç Grupo: '{norm_ciudad}' - Total: {total_grupo:,} registros")
        print("   Variantes:")
        for ciudad_original, count in sorted(variantes, key=lambda x: x[1], reverse=True):
            print(f"      ‚Ä¢ '{ciudad_original}': {count:,} registros")
else:
    print("\n‚úì No se detectaron variantes obvias (todas las ciudades son √∫nicas)")

# An√°lisis de patrones comunes
print("\n" + "="*100)
print("AN√ÅLISIS DE PATRONES")
print("="*100)

patrones = {
    'Con "Pto." o "Pto"': 0,
    'Con "Puerto"': 0,
    'Todo min√∫sculas': 0,
    'Todo may√∫sculas': 0,
    'Primera letra may√∫scula': 0,
    'Con n√∫meros': 0,
    'Con caracteres especiales': 0,
}

for ciudad in ciudades_con_valor.keys():
    if 'pto.' in ciudad.lower() or 'pto ' in ciudad.lower():
        patrones['Con "Pto." o "Pto"'] += 1
    if 'puerto' in ciudad.lower():
        patrones['Con "Puerto"'] += 1
    if ciudad.islower():
        patrones['Todo min√∫sculas'] += 1
    if ciudad.isupper():
        patrones['Todo may√∫sculas'] += 1
    if ciudad[0].isupper() and ciudad[1:].islower() if len(ciudad) > 1 else False:
        patrones['Primera letra may√∫scula'] += 1
    if any(char.isdigit() for char in ciudad):
        patrones['Con n√∫meros'] += 1
    if any(char in ciudad for char in ['@', '#', '$', '%', '&', '*', '(', ')', '[', ']']):
        patrones['Con caracteres especiales'] += 1

print()
for patron, count in patrones.items():
    if count > 0:
        print(f"  {patron:<35}: {count:>5} ciudades")

print("\n" + "="*100)
print("RECOMENDACIONES")
print("="*100)
print("""
1. Se detectaron m√∫ltiples variantes de las mismas ciudades
2. Es necesario crear un diccionario de normalizaci√≥n
3. Priorizar las ciudades con m√°s registros para el mapeo
4. Considerar casos especiales (abreviaciones, tildes, may√∫sculas)

PR√ìXIMO PASO:
- Crear diccionario de normalizaci√≥n en FASE 2
- Mapear todas las variantes detectadas a nombres oficiales
""")

print("\n" + "="*100 + "\n")
